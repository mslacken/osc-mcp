repositories:
  - name: "openSUSE_Tumbleweed"
    path_project: "openSUSE:Factory"
    path_repository: "snapshot"
    arches:
      - "x86_64"
copyright_header: |
  #
  # spec file for package __PACKAGE_NAME__
  #
  # Copyright (c) __YEAR__ SUSE LLC and contributors
  #
  # All modifications and additions to the file contributed by third parties
  # remain the property of their copyright owners, unless otherwise agreed
  # upon. The license for this file, and modifications and additions to the
  # file, is the same license as for the pristine package itself (unless the
  # license for the pristine package is not an Open Source License, in which
  # case the license is the MIT License). An "Open Source License" is a
  # license that conforms to the Open Source Definition (Version 1.9)
  # published by the Open Source Initiative.

  # Please submit bugfixes or comments via https://bugs.opensuse.org/
  #

specs:
  default: |
    Name:           __PACKAGE_NAME__
    Version:        0.0.0        
    Release:        0
    Summary:
    License:        
    URL:            
    
    # **IMPORTANT**: Prefer downloading of a source file via a service over direct download!
    # needs to run service download_files to download files
    Source: https://github.com/foo/baar/v%{version}.tar.gz#./%{name}-%{version}.tar.gz         
    BuildRequires:  

    %description

    %prep
    # The autosetup macro unpacks the source archive and applies any patches.
    # Common options:
    # -p1: Strip the first leading component from file names in patches (e.g., a/dir/file -> dir/file).
    # -n <name>: Set the name of the source directory if it's different from the package name.
    # -a <number>: Unpack the specified source archive (e.g., -a 1 for Source1).
    # -N: Do not apply patches automatically. Use macro autopatch later.
    %autosetup -p1

    %build
    %configure
    %make_build

    %install
    %make_install

    %check
    %make_build check

    %files
    # list files here

    # IMPORTANT: changelog goes to separare file __PACKAGE_NAME__.changes commit function may create it automatically 
    %changelog
  python: |
    Name:           __PACKAGE_NAME__
    Version:        0.0.0        
    Release:        0
    Summary:        
    License:        
    URL:            
    
    # **IMPORTANT**: Prefer downloading of a source file via a service over direct download!
    # needs to run service download_files to download files
    Source: https://github.com/foo/baar/v%{version}.tar.gz#./%{name}-%{version}.tar.gz         
    BuildRequires:  python-rpm-macros
    %prep
    # The autosetup macro unpacks the source archive and applies any patches.
    # Common options:
    # -p1: Strip the first leading component from file names in patches (e.g., a/dir/file -> dir/file).
    # -n <name>: Set the name of the source directory if it's different from the package name.
    # -a <number>: Unpack the specified source archive (e.g., -a 1 for Source1).
    # -N: Do not apply patches automatically. Use macro autopatch later.
    %autosetup -p1

    %build
    %python3_build

    %install
    %python3_install

    %check
    # not all packages have tests
    #%python3_test

    %files
    # list files here

    # IMPORTANT: changelog goes to separare file __PACKAGE_NAME__.changes commit function may create it automatically 
    %changelog
  go: |
    %global goipath         github.com/!REPLACE!/__PACKAGE_NAME__
    Name:           __PACKAGE_NAME__
    Version:        0.0.0        
    Release:        0
    Summary:        
    License:        
    URL:            
    
    # **IMPORTANT**: Prefer downloading of a source file via a service over direct download!
    # needs to run service download_files to download files
    Source0:        https://github.com/foo/baar/v%{version}.tar.gz#./%{name}-%{version}.tar.gz         
    # **IMPORTANT**: If the source doesn't include a vendor.tar.xz create one via go_modules service
    # **IMPORTANT**: Make sure that the Source0 exists as this file is used to get the modules and inlcude it -a1 for autosetup
    # Source1: vendor.tar.gz

    BuildRequires:  golang-packaging
    BuildRequires:  golang(API)

    %description

    %prep
    # The autosetup macro unpacks the source archive and applies any patches.
    # Common options:
    # -p1: Strip the first leading component from file names in patches (e.g., a/dir/file -> dir/file).
    # -n <name>: Set the name of the source directory if it's different from the package name.
    # -a <number>: Unpack the specified source archive (e.g., -a 1 for Source1).
    # -N: Do not apply patches automatically. Use macro autopatch later.
    %autosetup -p1

    %build
    %gobuild

    %install
    %goinstall

    %check
    %gocheck

    %files
    %{_bindir}/__PACKAGE_NAME__

    # IMPORTANT: changelog goes to separare file __PACKAGE_NAME__.changes commit function may create it automatically 
    %changelog
  java: |
    Name:           __PACKAGE_NAME__
    Version:        0.0.0        
    Release:        0
    Summary:        
    License:        
    URL:            
    
    # **IMPORTANT**: Prefer downloading of a source file via a service over direct download!
    # needs to run service download_files to download files
    Source: https://github.com/foo/baar/v%{version}.tar.gz#./%{name}-%{version}.tar.gz         
    BuildRequires:  java-devel >= 11
    BuildRequires:  maven-local
    BuildRequires:  mvn(org.apache.maven.plugins:maven-compiler-plugin)
    BuildRequires:  mvn(org.apache.maven.plugins:maven-jar-plugin)
    BuildRequires:  mvn(org.apache.maven.plugins:maven-surefire-plugin)
    BuildArch:      noarch

    %description

    %prep
    %setup -q

    %build
    %mvn_build

    %install
    %mvn_install

    %files
    %license LICENSE
    %doc README.md
    %mvn_artifact pom.xml target/%{name}-%{version}.jar

    # IMPORTANT: changelog goes to separare file __PACKAGE_NAME__.changes commit function may create it automatically 
    %changelog
  lua: |
    %global lua_name        __PACKAGE_NAME__
    %global lua_version     5.4
    Name:           lua%{lua_version}-%{lua_name}
    Version:        0.0.0        
    Release:        0
    Summary:        
    License:        
    URL:            
    
    # **IMPORTANT**: Prefer downloading of a source file via a service over direct download!
    # needs to run service download_files to download files
    Source: https://github.com/foo/baar/v%{version}.tar.gz#./%{name}-%{version}.tar.gz         
    BuildRequires:  lua%{lua_version}-devel

    %description

    %prep
    # The autosetup macro unpacks the source archive and applies any patches.
    # Common options:
    # -p1: Strip the first leading component from file names in patches (e.g., a/dir/file -> dir/file).
    # -n <name>: Set the name of the source directory if it's different from the package name.
    # -a <number>: Unpack the specified source archive (e.g., -a 1 for Source1).
    # -N: Do not apply patches automatically. Use macro autopatch later.
    %autosetup -p1

    %build
    # build steps here

    %install
    # install steps here

    %files

    # IMPORTANT: changelog goes to separare file __PACKAGE_NAME__.changes commit function may create it automatically 
    %changelog
  cargo: |
    Name:           __PACKAGE_NAME__
    Version:        0.0.0
    Release:        0
    Summary:
    License:
    URL:

    # **IMPORTANT**: Prefer downloading of a source file via a service over direct download!
    # needs to run service download_files to download files
    Source0:        https://github.com/foo/baar/v%{version}.tar.gz#./%{name}-%{version}.tar.gz
    # **IMPORTANT**: If the source doesn't include a vendor.tar.xz create one via cargo_vendor service
    # **IMPORTANT**: Make sure that the Source0 exists as this file is used to get the modules and inlcude it -a1 for autosetup
    # Source1:        vendor.tar.xz

    BuildRequires:  rust
    BuildRequires:  cargo
    BuildRequires:  cargo-packaging

    # If source includes vendor tarball use bcond_with vendored
    %bcond_with vendored

    %description

    %prep
    %if %{with vendored}
    %autosetup -a1 -p1
    %else
    %autosetup -p1
    %endif

    %build
    %if %{with vendored}
    %cargo_build --offline
    %else
    %cargo_build
    %endif

    %install
    %if %{with vendored}
    %cargo_install --offline
    %else
    %cargo_install
    %endif

    %check
    %if %{with vendored}
    %cargo_test --offline
    %else
    %cargo_test
    %endif

    %files
    %{_bindir}/__PACKAGE_NAME__

    # IMPORTANT: changelog goes to separare file __PACKAGE_NAME__.changes commit function may create it automatically
    %changelog
  node: |
    Name:           __PACKAGE_NAME__
    Version:        0.0.0
    Release:        0
    Summary:
    License:
    URL:

    # **IMPORTANT**: Prefer downloading of a source file via a service over direct download!
    # needs to run service download_files to download files
    Source0:        https://github.com/foo/baar/v%{version}.tar.gz#./%{name}-%{version}.tar.gz
    # **IMPORTANT**: If the source doesn't include a node_modules.tar.xz create one via node_modules service
    # **IMPORTANT**: Make sure that the Source0 exists as this file is used to get the modules and inlcude it -a1 for autosetup
    # Source1:        node_modules.tar.xz

    BuildRequires:  npm
    BuildRequires:  nodejs-packaging
    # Add additional build requires for packages in the package.json
    # BuildRequires:  npm(form-data) >= 3
    # BuildRequires:  npm(commander) >= 2.17.1
    BuildArch:      noarch

    # If source includes vendor tarball use bcond_with vendored
    %bcond_with vendored

    %description

    %prep
    %if %{with vendored}
    %autosetup -a1 -p1
    %else
    %autosetup -p1
    %endif

    %build
    %if %{with vendored}
    npm install --offline
    %else
    npm install
    %endif

    %install
    npm install --offline --prefix=%{buildroot}%{_prefix}

    %check
    npm test

    %files
    # list files here

    # IMPORTANT: changelog goes to separare file __PACKAGE_NAME__.changes commit function may create it automatically
    %changelog
services:
  tar_scm: |
      <service name="tar_scm">
        <param name="url">https://github.com/foo/__PACKAGE_NAME__</param>
        <param name="scm">git</param>
        <!-- <param name="revision">main</param> -->
        <!-- <param name="revision">v0.0.0</param> -->
        <!-- <param name="revision">__REPLACE_WITH_COMMIT_HASH__</param> -->
        <!-- <param name="subdir">__PACKAGE_NAME__</param> -->
        <!-- <param name="filename">__PACKAGE_NAME__</param> -->
        <!-- <param name="versionprefix">__PACKAGE_NAME__</param> -->
        <!-- <param name="versionformat">%y.%m</param> -->
      </service>
      <service name="recompress">
        <param name="file">*.tar</param>
        <param name="compression">xz</param>
        <!-- <param name="keep">true</param> -->
      </service>
  download_files: |
      <!--
      <service name="download_files">
        **IMPORTANT** This service parses the spec file for pattern
        SourceN: https://github.com/foo/pkg_name/archive/v0.0.0.tar.gz#/NEW_NAME.tar.gz
        PREFER THE USE OF URLS IN THE SPEC FILE!
      </service>
      -->
  go_modules: |
      <service name="go_modules">
        <!-- <param name="archive">__PACKAGE_NAME__-%{version}.tar.gz</param> -->
        <!-- <param name="basename">__PACKAGE_NAME__-%{version}</param> -->
        <!-- <param name="compression">xz</param> -->
        <!-- <param name="subdir">./</param> -->
        <!-- <param name="vendorname">vendor</param> -->
      </service>
  cargo_vendor: |
      <service name="cargo_vendor">
        <param name="url">https://github.com/foo/__PACKAGE_NAME__</param>
        <param name="compression">xz</param>
        <!-- <param name="revision">main</param> -->
        <!-- <param name="versioned-dirs">true</param> -->
        <!-- <param name="respect-lockfile">true</param> -->
        <!-- <param name="filter">true</param> -->
      </service>
      <service name="recompress">
        <param name="file">*.tar</param>
        <param name="compression">xz</param>
      </service>
  node_modules: |
      <service name="node_modules">
        <summary>download node modules</summary>
        <description>download node modules</description>
        <!-- <param name="file">package.json</param> -->
        <!-- <param name="spec-file">__PACKAGE_NAME__.spec</param> -->
        <!-- <param name="tarball">__PACKAGE_NAME__-%{version}.tar.gz</param> -->
        <!-- <param name="compression">xz</param> -->
      </service>


